name: CI service

on:
  workflow_call:
    inputs:
      dockerfile_path:
        required: true
        type: string
      build-args:
        type: string
        description: "List of build-time variables"
        required: false
      service_name:
        required: true
        type: string
      context_path:
        required: true
        type: string
      aws_ci_region:
        type: string
        default: "us-east-1"
      aws_ci_account:
        type: string
        default: "479886561928"

env:
  repository: dkr.ecr.${{ inputs.aws_ci_region }}.amazonaws.com/${{ inputs.service_name }}

jobs:
  test:
    name: Service unit tests
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore ${{ inputs.context_path }}
      - name: Build
        run: dotnet build --no-restore ${{ inputs.context_path }}
      - name: Test
        run: dotnet test --no-build --verbosity normal ${{ inputs.context_path }}

  build-push:
    runs-on: ubuntu-latest
    name: Service build and push
    needs: test
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials "DEV"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ inputs.aws_ci_region }}

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Registry check/creation
        run: |
          aws ecr describe-repositories --repository-names ${{ inputs.service_name }} \
          || aws ecr create-repository --repository-name ${{ inputs.service_name }}

      - name: Lifecycle policy check/creation
        run: |
          aws ecr get-lifecycle-policy --repository-name ${{ inputs.service_name }} \
          || aws ecr put-lifecycle-policy --repository-name ${{ inputs.service_name }} \
          --lifecycle-policy-text "file://./.github/templates/ecr-policy.json"

      - name: Login to ECR
        uses: docker/login-action@v2.0.0
        with:
          registry: ${{ inputs.aws_ci_account }}.${{ env.repository }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          ecr: true
          logout: true

      - name: Replace branch name bad chars
        id: branch_name
        run: |
          if [ ${{ github.event_name }} == "pull_request" ]; then
            name=$( echo '${{ github.head_ref }}' | tr '/' '-' )
            echo "::set-output name=branch_name::$name"
          else
            name=$( echo '${{ github.ref_name }}' | tr '/' '-' )
            echo "::set-output name=branch_name::$name"
          fi

      # Only push image to registry on "push" events.
      - name: Docker build and push
        uses: docker/setup-buildx-action@v1
        with:
          build-args:BSII_NUGET_URL=${{ secrets.BSII_NUGET_URL }}, BSII_NUGET_USER=${{ secrets.BSII_NUGET_USER }}, BSII_NUGET_PASSWORD=${{ secrets.BSII_NUGET_PASSWORD }}
        run: |
          if [ ${{ github.event_name == 'push' }} ]; then
            docker buildx build \
            -o type=registry \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ github.run_id }} \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ steps.branch_name.outputs.branch_name }} \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ github.sha }} \
            -f ${{ inputs.dockerfile_path }} \
            ${{ inputs.context_path }}
          else
            docker buildx build \
            -o type=image \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ github.run_id }} \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ steps.branch_name.outputs.branch_name }} \
            -t ${{ inputs.aws_ci_account }}.${{ env.repository }}:${{ github.sha }} \
            -f ${{ inputs.dockerfile_path }} \
            ${{ inputs.context_path }}    
          fi

  helm-publish:
    runs-on: ubuntu-latest
    name: Helm chart publish
    if: ${{ github.event_name == 'push' }}
    needs: build-push
    permissions:
      contents: read
    steps:
      - name: Checkout infra repository
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.INFRA_SSH_PRIVATE_KEY }}
          repository: brightsource-il/cloud-infrastructure
          ref: "stasl-feature"

      - name: Configure AWS Credentials "DEV"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ inputs.aws_ci_region }}

      - name: Replace branch name bad chars
        id: branch_name
        run: |
          if [ ${{ github.event_name }} == "pull_request" ]; then
            name=$( echo '${{ github.head_ref }}' | tr '/' '-' )
            echo "::set-output name=branch_name::$name"
          else
            name=$( echo '${{ github.ref_name }}' | tr '/' '-' )
            echo "::set-output name=branch_name::$name"
          fi

      # This step creates a versions.yaml file that includes all the latest/dev image tags to be used in the helm release.
      # It does so by looping over all the current service names in the 'services' folder, receiving a JSON list of images from AWS ECR for each service,
      # and querying the latest BuildID from it for the current service in the loop.
      - name: Create versions file
        run: |
          services=$(ls helm/services)
          branch="${{ steps.branch_name.outputs.branch_name }}"

          for service in $services
          do
          tag=$(aws ecr list-images --repository-name $service \
          | jq -e --arg branch $branch '. as $parent | .imageIds[] | select(.imageTag == $branch).imageDigest as $digest 
          | $parent | .imageIds[] | select((.imageDigest == $digest) and (.imageTag|test("^[[:digit:]]+$"))).imageTag' || echo "dev")

          cat << EOF >> helm/umbrella/versions.yaml 
          $service:
            image:
              tag: $tag

          EOF
          done
          cat helm/umbrella/versions.yaml

      # This step publishes the chart with the created versions.yaml file to an S3 bucket, it checks if the bucket exists and creates it if not and attaches a lifecycle policy.
      # If triggered by the "dev" branch, the chart will be uploaded to "dev" folder, otherwise to "temp" folder.
      - name: Publish chart to S3 bucket
        run: |
          zip -r ${{ github.run_id }}-${{ steps.branch_name.outputs.branch_name }}.zip helm

          aws s3api get-bucket-versioning --bucket s3-charts-dev-${{ inputs.aws_ci_region }} 1>/dev/null || \
          aws s3api create-bucket --acl private --bucket s3-charts-dev-${{ inputs.aws_ci_region }} && \
          aws s3api put-bucket-versioning --bucket s3-charts-dev-${{ inputs.aws_ci_region }} --versioning-configuration Status=Enabled && \
          aws s3api put-bucket-lifecycle-configuration --bucket s3-charts-dev-${{ inputs.aws_ci_region }} \
          --lifecycle-configuration  file://./.github/templates/chart-lifecycle-policy.json

          if [ ${{ steps.branch_name.outputs.branch_name }} != 'dev' ]; then
            aws s3api put-object \
            --acl private \
            --bucket s3-charts-dev-${{ inputs.aws_ci_region }} \
            --body ${{ github.run_id }}-${{ steps.branch_name.outputs.branch_name }}.zip \
            --key temp/${{ github.run_id }}-${{ steps.branch_name.outputs.branch_name }}.zip
          else
            aws s3api put-object \
            --acl private \
            --bucket s3-charts-dev-${{ inputs.aws_ci_region }} \
            --body ${{ github.run_id }}-${{ steps.branch_name.outputs.branch_name }}.zip \
            --key dev/${{ github.run_id }}-${{ steps.branch_name.outputs.branch_name }}.zip
          fi
