name: 'CD'

on:
  workflow_call:
    inputs:
      env: 
        required: true
        type: string
        default: dev
      account:
        required: true
        type: string
      region:
        required: true
        type: string
      branch:
        required: true
        type: string
      default_bucket_region:
        type: string
        default: 'us-east-1'


permissions:
  contents: read

env:
  cluster_name:  eks-${{ inputs.env }}-${{ inputs.region }}
  charts_bucket: s3-charts-dev-us-east-1
  client_bucket: s3-client-dev-us-east-1


jobs:
  cd:
    name: Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials "DEV"
        if: ${{ inputs.env != 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ inputs.region }}

      - name: Configure AWS Credentials "PROD"
        if: ${{ inputs.env == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ inputs.region }}

      - name: Download Helm chart
        run: |
             set -Eeuo pipefail
             function getKey() {
               aws s3api list-objects --bucket $1 | \
               jq -e --arg branch $2 \
               '. as $parent | [.Contents[].Key | split("/")[1] | select(test($branch+".zip")) | split("-")[0] | tonumber] 
               | max | tostring | . as $buildId |
               $parent.Contents[].Key | select(test($buildId+"-"))' | sed 's/"//g'
             }

             chart_key=$(getKey ${{ env.charts_bucket }} ${{ inputs.branch }})
             echo "Key: $chart_key"

             aws s3api get-object --bucket ${{ env.charts_bucket }} \
             --key $chart_key chart.zip

             unzip chart.zip

      - name: Update kube config
        run: aws eks --region ${{ inputs.region }} update-kubeconfig --name ${{ env.cluster_name }}

      - name: Deploy helm chart
        run: |
             if [ -f helm/umbrella/values_${{ inputs.env }}.yaml ]; then
               envfile="-f helm/umbrella/values_${{ inputs.env }}.yaml"
             else
               envfile=""
             fi
             helm dependency build helm/umbrella
             helm upgrade bse-${{ inputs.env }} helm/umbrella \
             --namespace ${{ inputs.env }} \
             --install \
             --atomic \
             --create-namespace \
             --dependency-update \
             --wait \
             -f helm/umbrella/common.yaml $envfile \
             -f helm/umbrella/versions.yaml

      - name: Download client
        run: |
             set -Eeuo pipefail
             function getKey() {
               aws s3api list-objects --bucket $1 | \
               jq -e --arg branch $2 \
               '. as $parent | [.Contents[].Key | split("/")[1] | select(test($branch+".zip")) | split("-")[0] | tonumber] 
               | max | tostring | . as $buildId |
               $parent.Contents[].Key | select(test($buildId+"-"))' | sed 's/"//g'
             }

             client_key=$(getKey ${{ env.client_bucket }} ${{ inputs.branch }} || getKey ${{ env.client_bucket }} dev)
             echo "Key: $client_key"

             aws s3api get-object --bucket ${{ env.client_bucket }} \
             --key $client_key client.zip

             unzip client.zip

      - name: Deploy client
        run: |
             cat << EOF > dist/assets/config.json
             { 
                 "environment":{
                     "baseUrl": "http://bff.${{ inputs.env }}.brightsourceenergy.net"
                 }
             }
             EOF

             app_bucket=$(aws s3api list-buckets | jq -e '.Buckets[].Name | select(test("s3-app-${{ inputs.env }}-${{ inputs.region }}"))' | sed 's/"//g')
             aws s3 cp ./dist s3://$app_bucket/dist --recursive
